import os
import openai
import time
import telegram
from telegram import Bot, Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import Updater, MessageHandler, Filters, CommandHandler, CallbackContext
import logging
from telegram import InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Updater, CommandHandler, CallbackQueryHandler, CallbackContext
import time
import threading
import urllib3


class ChatGPTBot:
    import openai
    from telegram import InlineKeyboardButton, InlineKeyboardMarkup
    from telegram.ext import Updater, CommandHandler, CallbackQueryHandler, CallbackContext

    def __init__(self, telegram_token, openai_api_key):
        self.bot = Bot(token=telegram_token)
        self.openai_api_key = openai_api_key
        openai.api_key = openai_api_key

        # –°–ª–æ–≤–∞—Ä—å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ä–µ—Ñ–µ—Ä—Ä–∞–ª–æ–≤
        self.referral_dict = {}

        # –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        self.referral_stats = {}

        self.user_requests = {}
        print("HUYYYYY ", telegram.__version__)
        self.reply_markup = self.create_reply_markup()
        self.updater = Updater(token=telegram_token, use_context=True)
        self.dispatcher = self.updater.dispatcher
        self.dispatcher.add_handler(MessageHandler(Filters.text & ~Filters.command, self.handle_message))
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ä–µ—Ñ–µ—Ä—Ä–∞–ª—å–Ω—ã—Ö —Å—Å—ã–ª–æ–∫
        self.dispatcher.add_handler(CallbackQueryHandler(self.referral_handler, pattern='^\\d+$'))
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /stats
        # user = update.message.from_user
        # chat_id = user.id
        self.dispatcher.add_handler(CommandHandler("stats", self.stats))
        # self.dispatcher.add_handler(CommandHandler("start", self.start_message(chat_id)))
        self.start_daily_reset_thread()
        self.start_polling()

    def is_user_subscribed(self, user_id, channel_username):
        try:
            user_status = self.bot.get_chat_member(chat_id=channel_username, user_id=user_id).status
            if user_status in ['member', 'administrator', 'creator']:
                return True
        except Exception as e:
            print(f"Error checking subscription status: {e}")
        return False

    def start_daily_reset_thread(self):
        # –°–æ–∑–¥–∞–µ–º –ø–æ—Ç–æ–∫, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 8 —É—Ç—Ä–∞
        reset_thread = threading.Thread(target=self.daily_reset_thread)
        reset_thread.daemon = True
        reset_thread.start()

    def daily_reset_thread(self):
        while True:
            current_time = time.localtime()
            if current_time.tm_hour == 2 and current_time.tm_min == 29:
                # –°–±—Ä–æ—Å –∑–Ω–∞—á–µ–Ω–∏–π –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                self.reset_user_requests()
            # –ñ–¥–µ–º 1 –º–∏–Ω—É—Ç—É –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π
            time.sleep(60)

    def reset_user_requests(self):
        # –°–±—Ä–æ—Å –∑–Ω–∞—á–µ–Ω–∏–π –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        for user_id in self.user_requests:
            self.user_requests[user_id] = 10

    def start_message(self, chat_id):
        message = f"""ü§ñ –ü—Ä–∏–≤–µ—Ç,{chat_id}! –Ø –±–æ—Ç ChatGPT!

                                üîó –í—ã –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞–≤–∞—Ç—å –ª—é–±—ã–µ –≤–æ–ø—Ä–æ—Å—ã

                                –¢–∞–∫–∂–µ –±–æ—Ç –∏–Ω–æ–≥–¥–∞ –º–æ–∂–µ—Ç –≥—Ä—É–∑–∏—Ç—å –æ—Ç–≤–µ—Ç –≤ —Ç–µ—á–µ–Ω–∏–∏ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –º–∏–Ω—É—Ç. –í—Å–µ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–æ–≤ –Ω–∞ —Å—Ç–æ—Ä–æ–Ω–µ OpenAI!

                                –°–æ–≤–µ—Ç—ã –∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é:
                                ‚Äì –ó–∞–¥–∞–≤–∞–π—Ç–µ –æ—Å–º—ã—Å–ª–µ–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã, —Ä–∞—Å–ø–∏—Å—ã–≤–∞–π—Ç–µ –¥–µ—Ç–∞–ª—å–Ω–µ–µ.
                                ‚Äì –ù–µ –ø–∏—à–∏—Ç–µ –µ—Ä—É–Ω–¥—É –∏–Ω–∞—á–µ –æ–¥–µ—Ä–∂–∏—Ç–µ –µ—ë –∂–µ –≤ –æ—Ç–≤–µ—Ç.

                                –ü—Ä–∏–º–µ—Ä—ã –≤–æ–ø—Ä–æ—Å–æ–≤/–∑–∞–ø—Ä–æ—Å–æ–≤:
                                ~ –°–∫–æ–ª—å–∫–æ –±—É–¥–µ—Ç 7 * 8?
                                ~ –ö–æ–≥–¥–∞ –Ω–∞—á–∞–ª–∞—Å—å –í—Ç–æ—Ä–∞—è –ú–∏—Ä–æ–≤–∞—è?
                                ~ –ù–∞–ø–∏—à–∏ –∫–æ–¥ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞ –Ω–∞ Python
                                ~ –ù–∞–ø–∏—à–∏ —Å–æ—á–∏–Ω–µ–Ω–∏–µ –∫–∞–∫ —è –ø—Ä–æ–≤–µ–ª –ª–µ—Ç–æ

                                üî• –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –æ–±—â–µ–Ω–∏–µ, –Ω–∞–ø–∏—à–∏ —á—Ç–æ-–Ω–∏–±—É–¥—å CHATGPT –≤ —Å—Ç—Ä–æ–∫—É –Ω–∏–∂–µ üëáüèª"""
        return message

    def start(self, update: Update, context: CallbackContext):
        user_id = update.effective_user.id
        channel_username = '@uzbopenai'  # Replace with your channel's username
        check = self.is_user_subscribed(user_id, channel_username)
        if not check:
            update.message.reply_text(
                f'–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª {channel_username} —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–º—É —á–∞—Ç-–±–æ—Ç—É ü§ñ')
            return False
        else:
            # update.message.reply_text('Welcome to the bot! Thank you for subscribing.')
            return True



    def create_referal_message(self, update, chat_id):
        user = update.message.from_user
        referral_code = user.id  # –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–∞–∫ —Ä–µ—Ñ–µ—Ä—Ä–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞
        self.referral_dict[referral_code] = user.id
        text = f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}! –¢–≤–æ—è —Ä–µ—Ñ–µ—Ä—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞: t.me/Gptuz_chatbot?start={referral_code}"
        self.user_requests[chat_id] += 1
        return text

    def premium_podpiska(self, chat_id):
        premium_subscription_info = """
                –°–∫–æ—Ä–æ –ü—Ä–µ–º–∏—É–º –ü–æ–¥–ø–∏—Å–∫–∞!
üõ†
–ù–∞—à–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –ü—Ä–µ–º–∏—É–º –ü–æ–¥–ø–∏—Å–∫–∏ –ø–æ—á—Ç–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã. 
–û–∂–∏–¥–∞–π—Ç–µ –¥–æ—Å—Ç—É–ø –≤ –±–ª–∏–∂–∞–π—à–∏–µ –¥–Ω–∏. 
–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –∏–Ω—Ç–µ—Ä–µ—Å!

                """
        self.bot.send_message(chat_id=chat_id, text=premium_subscription_info)

    def create_reply_markup(self):
        buttons = [
            [KeyboardButton("–Ω–∞—á–∞—Ç—å –Ω–æ–≤—ã–π –¥–∏–∞–ª–æ–≥")],
            [KeyboardButton("‚ùì –ß—Ç–æ —è —É–º–µ—é")],
            [KeyboardButton("üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å")],
            [KeyboardButton("üîí –ü—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–∞")],
        ]
        return ReplyKeyboardMarkup(buttons, resize_keyboard=True)

    def create_referal_button(self):
        buttons = [
            [KeyboardButton("–ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å —á–µ–ª–æ–≤–µ–∫–∞")],
            [KeyboardButton("–ù–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É")],
        ]
        return ReplyKeyboardMarkup(buttons, resize_keyboard=True)

    def send_loading_bar(self, chat_id):
        message = self.bot.send_message(chat_id, "–û–±—Ä–∞–±–æ—Ç–∫–∞")
        for i in range(1, 3):
            time.sleep(1)  # Simulate work
            progress = f"–û–±—Ä–∞–±–æ—Ç–∫–∞ {'‚åõ' * i}"
            self.bot.edit_message_text(chat_id=chat_id, message_id=message.message_id, text=progress)

        self.bot.edit_message_text(chat_id=chat_id, message_id=message.message_id, text="–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! ‚úÖ")
        return message.message_id

    def delete_message_by_id(self, chat_id, message_id):
        self.bot.delete_message(chat_id=chat_id, message_id=message_id)

    def handle_message(self, update: Update, context: CallbackContext):

        if not self.start(update, context):
            return
        user_input = update.message.text
        chat_id = update.effective_chat.id
        context.bot.send_chat_action(chat_id=chat_id, action=telegram.ChatAction.TYPING)

        if user_input == "‚ùì –ß—Ç–æ —è —É–º–µ—é":
            predefined_message = self.generate_predefined_message()
            self.bot.send_message(chat_id=chat_id, text=predefined_message, reply_markup=self.reply_markup)
        elif user_input == "üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å":
            self.generate_user_profile(chat_id)
        elif user_input == "üîí –ü—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–∞":
            self.premium_podpiska(chat_id)
        elif user_input == "–ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å —á–µ–ª–æ–≤–µ–∫–∞":
            predefined_message = self.create_referal_message(update, chat_id)
            self.bot.send_message(chat_id=chat_id, text=predefined_message, reply_markup=self.reply_markup)
        elif user_input == "–ù–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É":
            predefined_message = self.generate_predefined_message()
            self.bot.send_message(chat_id=chat_id, text=predefined_message, reply_markup=self.reply_markup)
        elif user_input == "start":
            self.start_message(chat_id)
        elif user_input == "test_channel":
            self.start(chat_id)


        else:
            if chat_id not in self.user_requests:
                self.user_requests[chat_id] = 5

            if self.user_requests[chat_id] > 0:
                self.user_requests[chat_id] -= 1
                processing_id = self.send_loading_bar(chat_id)
                response = self.generate_response(user_input)
                self.bot.send_message(chat_id=chat_id, text=response, reply_markup=self.reply_markup)
                self.delete_message_by_id(chat_id, processing_id)
            else:
                self.bot.send_message(chat_id=chat_id,
                                      text="–£ –≤–∞—Å –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –∑–∞–ø—Ä–æ—Å—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∑–∞ –ø–æ–¥–ø–∏—Å–∫–æ–π –∏–ª–∏ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ –¥—Ä—É–∑–µ–π.",
                                      reply_markup=self.reply_markup)

    def generate_response(self, user_input):
        response = openai.ChatCompletion.create(
            model="gpt-3.5-turbo",
            messages=[
                {"role": "system", "content": "–í—ã - –ø–æ–ª–µ–∑–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç."},
                {"role": "user", "content": user_input},
            ],
        )
        response_text = response['choices'][0]['message']['content']
        return response_text

    def generate_predefined_message(self):
        predefined_message = """
    üî• –î–∞–≤–∞–π —Ä–∞—Å—Å–∫–∞–∂—É —á–µ–º —è –º–æ–≥—É —Ç–µ–±–µ –ø–æ–º–æ—á—å?

    1Ô∏è‚É£ –°–æ–∑–¥–∞—Ç—å —Ä–µ–∑—é–º–µ. –° –º–æ–µ–π –ø–æ–º–æ—â—å—é —Ç—ã –º–æ–∂–µ—à—å —É—Å—Ç—Ä–æ–∏—Ç—å—Å—è –Ω–∞ —Ä–∞–±–æ—Ç—É –º–µ—á—Ç—ã, –≤–µ–¥—å —è –º–æ–≥—É –Ω–∞–ø–∏—Å–∞—Ç—å —Ö–æ—Ä–æ—à–µ–µ —Ä–µ–∑—é–º–µ
    2Ô∏è‚É£ –ù–∞–ø–∏—Å–∞—Ç—å —Ç–µ–∫—Å—Ç –Ω–∞ –ª—é–±—É—é —Ç–µ–º—É. –≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ –≤ —Ä–∞–±–æ—Ç–µ –∏ —É—á–µ–±–µ
    3Ô∏è‚É£ –ü–µ—Ä–µ–≤–µ—Å—Ç–∏ —Ç–µ–∫—Å—Ç —Å –∏–Ω–æ—Å—Ç—Ä–∞–Ω–Ω–æ–≥–æ —è–∑—ã–∫–∞
    4Ô∏è‚É£ –û—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–µ —Ç–µ–±—è –≤–æ–ø—Ä–æ—Å—ã. –ß–∞—â–µ –≤—Å–µ–≥–æ —É –º–µ–Ω—è –ø–æ–ª—É—á–∞–µ—Ç—Å—è —ç—Ç–æ –ª—É—á—à–µ, —á–µ–º —É –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –ø–æ–∏—Å–∫–æ–≤–∏–∫–æ–≤
    5Ô∏è‚É£ –ù–∞–ø–∏—Å–∞—Ç—å –∫–æ–¥, –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –µ–≥–æ —Å –æ–¥–Ω–æ–≥–æ —è–∑—ã–∫–∞ –Ω–∞ –¥—Ä—É–≥–æ–π –∏ –Ω–∞–π—Ç–∏ –æ—à–∏–±–∫–∏
    6Ô∏è‚É£ –ü–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –∏ –æ—Å—É—â–µ—Å—Ç–≤–ª—è—Ç—å —Ä–∞—Å—á–µ—Ç—ã. –ù–∞–ø—Ä–∏–º–µ—Ä, —Ç—ã –º–æ–∂–µ—à—å –∑–∞ —Å—á–∏—Ç–∞–Ω–Ω—ã–µ —Å–µ–∫—É–Ω–¥—ã –ø–æ–ª—É—á–∏—Ç—å –≥–æ—Ç–æ–≤—ã–π –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è –¥–ª—è –ø–æ—Ö—É–¥–µ–Ω–∏—è

    üí° –≠—Ç–æ –ª–∏—à—å –º–∞–ª–∞—è —á–∞—Å—Ç—å –º–æ–µ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞. –ó–∞–¥–∞–≤–∞–π –º–Ω–µ –ª—é–±—ã–µ –∑–∞–¥–∞—á–∏, –∞ —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å —Ç–µ–±–µ –ø–æ–º–æ—á—å.

    –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å–æ–æ–±—â–µ–Ω–∏–µ üëáüèª
    """
        return predefined_message

    def generate_user_profile(self, user_id):

        if user_id not in self.user_requests:
            self.user_requests[user_id] = 5
        available_requests = self.user_requests[user_id]
        user_profile = f"""
    üí¨ –î–æ—Å—Ç—É–ø–Ω–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è ChatGPT: {available_requests}
    
    –ó–∞—á–µ–º –Ω—É–∂–Ω—ã –∑–∞–ø—Ä–æ—Å—ã ChatGPT?

    –ó–∞–¥–∞–≤–∞—è –≤–æ–ø—Ä–æ—Å—ã - —Ç—ã —Ç—Ä–∞—Ç–∏—à—å 1 –∑–∞–ø—Ä–æ—Å. –ë–µ—Å–ø–ª–∞—Ç–Ω–æ –º–æ–∂–Ω–æ —Ç—Ä–∞—Ç–∏—Ç—å 5 –∑–∞–ø—Ä–æ—Å–æ–≤ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å. –ó–∞–ø—Ä–æ—Å—ã –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é—Ç—Å—è –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 08:00 –ø–æ –ú–æ—Å–∫–æ–≤—Å–∫–æ–º—É –≤—Ä–µ–º–µ–Ω–∏.

    –ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ ChatGPT?

    1Ô∏è‚É£ –í—ã –º–æ–∂–µ—Ç–µ –∫—É–ø–∏—Ç—å –ø—Ä–µ–º–∏—É–º-–ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è ChatGPT –∏–ª–∏ –∑–∞–ø—Ä–æ—Å—ã –∏ –Ω–µ –ø–∞—Ä–∏—Ç—å—Å—è –æ –ª–∏–º–∏—Ç–∞—Ö.
    2Ô∏è‚É£ –í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å —á–µ–ª–æ–≤–µ–∫–∞ –≤ –±–æ—Ç–∞ –∏ –ø–æ–ª—É—á–∏—Ç—å –∑–∞ –Ω–µ–≥–æ 3 –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–∞.
    3Ô∏è‚É£ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–∞—à–∏ –∫–∞–Ω–∞–ª—ã –∏ –ø–æ–ª—É—á–∏—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –±–æ–Ω—É—Å –≤ –≤–∏–¥–µ 5 –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤, –Ω–æ —ç—Ç–æ –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –ª–∏—à—å –µ–¥–∏–Ω–æ–∂–¥—ã
    """
        self.bot.send_message(chat_id=user_id, text=user_profile, reply_markup=self.create_referal_button())
        self.create_referal_button()
        return user_profile

    def start_polling(self):
        self.updater.start_polling()
        self.updater.idle()

    def referral_handler(self, update, context):
        query = update.callback_query
        referred_user_id = query.from_user.id
        chat_id = referred_user_id
        referring_user_id = int(query.data)

        if referring_user_id in self.referral_dict:
            referring_user = context.bot.get_chat(self.referral_dict[referring_user_id])
            referred_user = query.from_user
            query.answer(f"–¢—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è —Å —Ä–µ—Ñ–µ—Ä—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–æ–π –æ—Ç {referring_user.first_name}!")
            # –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –∫–æ–¥ –¥–ª—è –Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏—è –ø—Ä–∏–≥–ª–∞—Å–∏–≤—à–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    def stats(self, update, context):

        user = update.message.from_user
        print(user.id)
        MISHA_CHAT_ID = 364954921
        ELDOR_CHAT_ID = 121396902
        ADMIN_USER_ID = ELDOR_CHAT_ID

        if user.id == ADMIN_USER_ID or user.id == MISHA_CHAT_ID:  # –ó–∞–º–µ–Ω–∏—Ç–µ ADMIN_USER_ID –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            stats = self.referral_dict
            message = "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–µ—Ñ–µ—Ä—Ä–∞–ª—å–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:\n\n"
            for referring_user, referred_count in stats.items():
                referring_user_info = context.bot.get_chat(referring_user)
                message += f"{referring_user_info.first_name}: {referred_count} –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã—Ö\n"
            update.message.reply_text(message)
            print("referral_Stats: ", self.referral_stats)
            print("referral_dict: ", self.referral_dict)

        else:
            update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ.")


if __name__ == "__main__":
    # Set your Telegram bot token and OpenAI API key
    TELEGRAM_BOT_TOKEN = 'YOUR_TELEGRAMBOT_APIKEY'
    OPENAI_API_KEY = 'YOUR_OPENAI_APIKEY'
    chatgpt_bot = ChatGPTBot(TELEGRAM_BOT_TOKEN, OPENAI_API_KEY)